var documenterSearchIndex = {"docs":
[{"location":"#InverseStatMech.jl","page":"Home","title":"InverseStatMech.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Efficient inverse statistical mechanical algorithms to generate effective potentials or configurations from pair correlation functions or structure factors.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Torquato-Wang algorithm (Torquato and Wang, PRE 2020) to find optimized parametrized potentials given target g_2(r) and S(k)\nIterative Boltzmann Inversion (Soper, Chem. Phys. 1996) to find optimimzed binned potentials given target g_2(r)\nReverse Monte-Carlo algorithm (McGreevy, J. Phys. Cond. Matter 2001) to find configuration that match target g_2(r)\nMore to come!","category":"page"},{"location":"#Function-Documentation","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"optim_parametrized_pot\niterative_boltzmann\nreverse_mc","category":"page"},{"location":"#InverseStatMech.optim_parametrized_pot","page":"Home","title":"InverseStatMech.optim_parametrized_pot","text":"optim_parametrized_pot(my_params, pot, dim, ρ, targ_g2, targ_s; \n    large_r_grid = missing, n::Int = 600, bin_size::Float64 = 0.05, r_range::Float64 = 10, k_range::Float64 = 10,\n    g2_weight_range::Float64 = 2, s_weight_range::Float64 = 4, \n    n_threads::Int = 15, configs_per_box::Int = 10, Ψ_tol::Float64 = 0.005, show_pb::Bool = true, test::Bool = false)\n\nUsing the Torquato-Wang algorithm to perform iterative optimization of potential parameters to match target pair correlation function and structure factor.\n\nArguments\n\nmy_params::Vector{Float64}: Vector of initial potential parameters.\npot::Function: Potential function that calculates the interaction potential between particles.\ndim::Int: Dimension of the system.\nρ::Float64: Density of the system.\ntarg_g2::Function: Function representing the target pair correlation function. Accepts a distance value r and returns the target g2 value at that distance.\ntarg_s::Function: Function representing the target structure factor. Accepts a wave vector k and returns the target S value at that wave vector.\n\nKeyword Arguments (all are optional)\n\nlarge_r_grid::Missing: Large-r grid for computation of long-ranged potentials. Default value is missing.\nn::Int: Number of boxes for simulation. Default value is 600.\nbin_size::Float64: Size of the bin for pair correlation function and structure factor calculations. Default value is 0.05.\nr_range::Float64: Range of r values for pair correlation function calculation. Default value is 10.\nk_range::Float64: Range of k values for structure factor calculation. Default value is 10.\ng2_weight_range::Float64: Weight range for pair correlation function in the objective function. Default value is 2.\ns_weight_range::Float64: Weight range for structure factor in the objective function. Default value is 4.\nn_threads::Int: Number of threads for parallel computation. Default value is 15.\nconfigs_per_box::Int: Number of configurations per box for simulation. Default value is 10.\nΨ_tol::Float64: Tolerance for convergence of the objective function. Default value is 0.005.\nshow_pb::Bool: Boolean indicating whether to display a progress bar during simulation. Default value is true.\ntest::Bool: Boolean flag to indicate whether this is a test run and return a boolean indicating convergence. Default value is false.\n\nReturns\n\nIf test is true, returns true if convergence is achieved, false otherwise.\nIf test is false, returns the optimized potential parameters.\n\nExample\n\n#form of the pair potential\npot(r, params) = params[1]*exp(-(r/params[2])^2)\n\n#initial guess parameters\nmy_params = [1.0, 2.0] #write 1.0 instead of 1 to indicate that this is Float64\n\n#target pair correlation function and structure factor\ntarg_g2(r) = 1 \ntarg_s(r) = 1\n\n#optimize the parameters\nInverseStatMech.optim_parametrized_pot(my_params, pot, 2, 1, targ_g2, targ_s)\n\n\n\n\n\n","category":"function"},{"location":"#InverseStatMech.iterative_boltzmann","page":"Home","title":"InverseStatMech.iterative_boltzmann","text":"iterative_boltzmann(pot, dim, ρ, targ_g2, α = 1; n = 500, bin_size = 0.05, r_range = 10)\n\nIteratively updates the pair potential pot using the Boltzmann inversion method to match the target pair correlation function targ_g2.\n\nArguments\n\npot: The initial pair potential function to be optimized.\ndim: The dimensionality of the system.\nρ: The number density of particles in the system.\ntarg_g2: The target pair correlation function g_2(r).\nα: The update parameter for the potential. (Optional, default: 1)\n\nKeyword Arguments (All are optional)\n\nn: Number of configurations for each box in the simulation. (default: 500)\nbin_size: Bin size for the histograms of pair correlation functions. (default: 0.05)\nr_range: Maximum distance to compute the pair correlation function. (default: 10)\nn_threads: Number of threads to use for parallel computation. (default: 15)\nconfigs_per_box: Number of configurations to generate for each thread. (default: 10)\nΨ_tol: Tolerance for stopping criterion. (default: 0.005)\nshow_pb: Whether to show the progress bar during the simulation. (default: true)\ntest: Whether to run the function in test mode. (default: false)\n\nReturns\n\nIf test=true, returns a boolean indicating whether the optimization is successful.\nOtherwise, returns the optimized pair potential function.\n\nExample\n\noptimized_potential = iterative_boltzmann(r -> 0, 2, 1.0, r -> exp(-π*r^2))\n\n\n\n\n\n","category":"function"},{"location":"#InverseStatMech.reverse_mc","page":"Home","title":"InverseStatMech.reverse_mc","text":"reverse_mc(dim, n, ρ, g2_targ; initial_box = missing, bin_size = 0.05, range = 5, sweeps = 100, displace = 0.1, t_i = 1, t_f = 0.001, cooling_rate = 0.98)\n\nReverse Monte Carlo algorithm to generate equilibrium configurations that yield a target pair correlation function g_2(r).\n\nArguments\n\ndim::Int: Dimensionality of the system.\nn::Int: Number of particles.\nρ::Float64: Number density of the particles.\ng2_targ::Function: Target pair correlation function as a function g2_targ(r).\n\nKeyword arguments\n\ninitial_box::Box (optional): Initial configuration box. Default is missing which generates a random box.\nbin_size::Float64 (optional): Bin size for computing the pair correlation function. Default is 0.05.\nrange::Float64 (optional): Range for the interaction potential. Default is 5.\nsweeps::Int (optional): Number of Monte Carlo sweeps at each temprature. Default is 100.\ndisplace::Float64 (optional): Maximum displacement for particle moves. Default is 0.1.\nt_i::Float64 (optional): Initial temperature. Default is 1.\nt_f::Float64 (optional): Final temperature. Default is 0.001.\ncooling_rate::Float64 (optional): Cooling rate for temperature reduction. Default is 0.98.\n\nReturns\n\nb::Box: Generated equilibrium classical configuration box. Use b.particles' to get the particle positions.\n\nExample\n\nbox = InverseStatMech.reverse_mc(2, 100, 0.5, r -> 1 - exp(-π*r^2))\n\n\n\n\n\n","category":"function"}]
}
